clc;clear all;path = fileparts(mfilename('fullpath'));addpath(char([path, "/ESNToolbox_Jaeger"]));data = csvread([path(1:end-4),"/Data/realizedlibrary01_normalized.csv"]);DJI_rv = data(:,2);FTSE_rv = data(:,3);GDAXI_rv = data(:,4);N225_rv = data(:,5);EUR_rv = data(:,6);disp("Data Loaded")function testError = run_ESN(nInputUnits, nInternalUnits, nOutputUnits, data)          data_shifted = shift(data,1);        train_fraction = 0.8;    [trainInputSequence, testInputSequence] = ...        split_train_test(data,train_fraction);         [trainOutputSequence,testOutputSequence] = ...        split_train_test(data_shifted,train_fraction);         esn = generate_esn(nInputUnits, nInternalUnits, nOutputUnits, ...        'spectralRadius',0.5, ...        'teacherScaling',[0.3],'teacherShift',[-0.2],'feedbackScaling', 0, ...        'type', 'plain_esn');             esn.internalWeights = esn.spectralRadius * esn.internalWeights_UnitSR;    nForgetPoints = 250;    [trainedEsn stateMatrix] = ...        train_esn(trainInputSequence, trainOutputSequence, esn, nForgetPoints);     predictedTrainOutput = test_esn(trainInputSequence, trainedEsn, nForgetPoints);    predictedTestOutput = test_esn(testInputSequence,  trainedEsn, nForgetPoints);     trainOutputSequence = exp((trainOutputSequence));    testOutputSequence = exp((testOutputSequence));    predictedTrainOutput = exp((predictedTrainOutput));    predictedTestOutput = exp((predictedTestOutput));    trainError = compute_NRMSE(predictedTrainOutput, trainOutputSequence);     testError = compute_NRMSE(predictedTestOutput, testOutputSequence);     endfunction function file_name = training_series(max_reservoir_size, nInputUnits, data, experiment_title)    test_Error = [];  reservoir_sizes = [];  mean_test_error = [];  min_test_error = [];    for i = 100:100:max_reservoir_size        runs_perNode = 50;          for x = 1:runs_perNode                test_Error_esn = run_ESN(nInputUnits, i, 1, data);                test_Error = [test_Error, test_Error_esn];                reservoir_sizes = [reservoir_sizes, i];            endfor        mean_test_error = [mean_test_error, mean(test_Error(size(test_Error)(2) - (runs_perNode - 1):end))];    min_test_error = [min_test_error, min(test_Error(size(test_Error)(2) - (runs_perNode - 1):end))];    disp(i);
    endfor      disp(strftime ("%Y-%m-%d %H:%M:%S", localtime (time ())));   disp(char(["Run finished ", experiment_title]));   results_summary = [reservoir_sizes; test_Error; [mean_test_error, zeros(1,  (size(reservoir_sizes)(2) - size(mean_test_error)(2)))]; [min_test_error , zeros(1,  (size(reservoir_sizes)(2) - size(mean_test_error)(2)))]];  file_name = char(["Results-Test-Error-", experiment_title,".csv"]);  save(file_name,"results_summary");     endfunction
function train_timeseries(time_series, name)    max_res_size = 1500;    file_names_list = [];     file_names_list = [file_names_list; training_series(max_res_size, 2, time_series, char([name, "-Univariate-2InputNeurons"]))];  file_names_list = [file_names_list; training_series(max_res_size, 5, time_series, char([name, "-Univariate-5InputNeurons"]))];  file_names_list = [file_names_list; training_series(max_res_size, 10, time_series, char([name, "-Univariate-10InputNeurons"]))];    save("Test_Result_Data.csv", "file_names_list")  endfunctiontrain_timeseries(DJI_rv, "DowJones");train_timeseries(FTSE_rv, "FTSE");train_timeseries(GDAXI_rv, "DAX");train_timeseries(N225_rv, "Nikkei225");train_timeseries(EUR_rv, "EURUSD");disp("Execution Successful")